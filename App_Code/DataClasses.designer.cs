#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbCrime")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertArea(Area instance);
  partial void UpdateArea(Area instance);
  partial void DeleteArea(Area instance);
  partial void InsertCity(City instance);
  partial void UpdateCity(City instance);
  partial void DeleteCity(City instance);
  partial void InsertCityZone(CityZone instance);
  partial void UpdateCityZone(CityZone instance);
  partial void DeleteCityZone(CityZone instance);
  partial void InsertCrime(Crime instance);
  partial void UpdateCrime(Crime instance);
  partial void DeleteCrime(Crime instance);
  partial void InsertCrimePic(CrimePic instance);
  partial void UpdateCrimePic(CrimePic instance);
  partial void DeleteCrimePic(CrimePic instance);
  partial void InsertFeedback(Feedback instance);
  partial void UpdateFeedback(Feedback instance);
  partial void DeleteFeedback(Feedback instance);
  partial void InsertLaw(Law instance);
  partial void UpdateLaw(Law instance);
  partial void DeleteLaw(Law instance);
  partial void InsertMessage(Message instance);
  partial void UpdateMessage(Message instance);
  partial void DeleteMessage(Message instance);
  partial void InsertMessageTO(MessageTO instance);
  partial void UpdateMessageTO(MessageTO instance);
  partial void DeleteMessageTO(MessageTO instance);
  partial void InsertPoliceStation(PoliceStation instance);
  partial void UpdatePoliceStation(PoliceStation instance);
  partial void DeletePoliceStation(PoliceStation instance);
  partial void InsertUserType(UserType instance);
  partial void UpdateUserType(UserType instance);
  partial void DeleteUserType(UserType instance);
  partial void InsertZone(Zone instance);
  partial void UpdateZone(Zone instance);
  partial void DeleteZone(Zone instance);
  partial void InsertCrimeType(CrimeType instance);
  partial void UpdateCrimeType(CrimeType instance);
  partial void DeleteCrimeType(CrimeType instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertCriminal(Criminal instance);
  partial void UpdateCriminal(Criminal instance);
  partial void DeleteCriminal(Criminal instance);
  partial void InsertNew(New instance);
  partial void UpdateNew(New instance);
  partial void DeleteNew(New instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["dbCrimeConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Area> Areas
	{
		get
		{
			return this.GetTable<Area>();
		}
	}
	
	public System.Data.Linq.Table<City> Cities
	{
		get
		{
			return this.GetTable<City>();
		}
	}
	
	public System.Data.Linq.Table<CityZone> CityZones
	{
		get
		{
			return this.GetTable<CityZone>();
		}
	}
	
	public System.Data.Linq.Table<Crime> Crimes
	{
		get
		{
			return this.GetTable<Crime>();
		}
	}
	
	public System.Data.Linq.Table<CrimePic> CrimePics
	{
		get
		{
			return this.GetTable<CrimePic>();
		}
	}
	
	public System.Data.Linq.Table<Feedback> Feedbacks
	{
		get
		{
			return this.GetTable<Feedback>();
		}
	}
	
	public System.Data.Linq.Table<Law> Laws
	{
		get
		{
			return this.GetTable<Law>();
		}
	}
	
	public System.Data.Linq.Table<Message> Messages
	{
		get
		{
			return this.GetTable<Message>();
		}
	}
	
	public System.Data.Linq.Table<MessageTO> MessageTOs
	{
		get
		{
			return this.GetTable<MessageTO>();
		}
	}
	
	public System.Data.Linq.Table<PoliceStation> PoliceStations
	{
		get
		{
			return this.GetTable<PoliceStation>();
		}
	}
	
	public System.Data.Linq.Table<UserType> UserTypes
	{
		get
		{
			return this.GetTable<UserType>();
		}
	}
	
	public System.Data.Linq.Table<Zone> Zones
	{
		get
		{
			return this.GetTable<Zone>();
		}
	}
	
	public System.Data.Linq.Table<CrimeType> CrimeTypes
	{
		get
		{
			return this.GetTable<CrimeType>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<Criminal> Criminals
	{
		get
		{
			return this.GetTable<Criminal>();
		}
	}
	
	public System.Data.Linq.Table<New> News
	{
		get
		{
			return this.GetTable<New>();
		}
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Area_Insert")]
	public int Area_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Aname", DbType="VarChar(50)")] string aname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Zcid", DbType="Int")] System.Nullable<int> zcid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aname, zcid, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Area_Update")]
	public int Area_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Aid", DbType="Int")] System.Nullable<int> aid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Aname", DbType="VarChar(50)")] string aname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Zcid", DbType="Int")] System.Nullable<int> zcid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aid, aname, zcid, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.City_Insert")]
	public int City_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cname", DbType="VarChar(50)")] string cname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cname, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.City_Update")]
	public int City_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cid", DbType="Int")] System.Nullable<int> cid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cname", DbType="VarChar(50)")] string cname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cid, cname, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CityZone_Insert")]
	public int CityZone_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cid", DbType="Int")] System.Nullable<int> cid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Zid", DbType="Int")] System.Nullable<int> zid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cid, zid, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CityZone_Update")]
	public int CityZone_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Zcid", DbType="Int")] System.Nullable<int> zcid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cid", DbType="Int")] System.Nullable<int> cid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Zid", DbType="Int")] System.Nullable<int> zid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), zcid, cid, zid, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Crime_Insert")]
	public int Crime_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Aid", DbType="Int")] System.Nullable<int> aid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uid", DbType="Int")] System.Nullable<int> uid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CrimeTypeID", DbType="Int")] System.Nullable<int> crimeTypeID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Crimedetails", DbType="VarChar(MAX)")] string crimedetails, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Priority", DbType="VarChar(50)")] string priority, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOC", DbType="DateTime")] System.Nullable<System.DateTime> dOC, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOU", DbType="DateTime")] System.Nullable<System.DateTime> dOU, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDone", DbType="Bit")] System.Nullable<bool> isDone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Detail", DbType="VarChar(MAX)")] string detail)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aid, uid, crimeTypeID, crimedetails, priority, dOC, dOU, isDone, detail);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Crime_Update")]
	public int Crime_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CrimeId", DbType="Int")] System.Nullable<int> crimeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Aid", DbType="Int")] System.Nullable<int> aid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uid", DbType="Int")] System.Nullable<int> uid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CrimeTypeID", DbType="Int")] System.Nullable<int> crimeTypeID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Crimedetails", DbType="VarChar(MAX)")] string crimedetails, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Priority", DbType="VarChar(50)")] string priority, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOC", DbType="DateTime")] System.Nullable<System.DateTime> dOC, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOU", DbType="DateTime")] System.Nullable<System.DateTime> dOU, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDone", DbType="Bit")] System.Nullable<bool> isDone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Detail", DbType="VarChar(MAX)")] string detail)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), crimeId, aid, uid, crimeTypeID, crimedetails, priority, dOC, dOU, isDone, detail);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CrimePics_Insert")]
	public int CrimePics_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CrimeId", DbType="Int")] System.Nullable<int> crimeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CrimePath", DbType="VarChar(50)")] string crimePath, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), crimeId, crimePath, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CrimePics_Update")]
	public int CrimePics_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Cpid", DbType="Int")] System.Nullable<int> cpid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CrimeId", DbType="Int")] System.Nullable<int> crimeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CrimePath", DbType="VarChar(50)")] string crimePath, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cpid, crimeId, crimePath, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Feedback_Insert")]
	public int Feedback_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uid", DbType="Int")] System.Nullable<int> uid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOF", DbType="DateTime")] System.Nullable<System.DateTime> dOF, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FMsg", DbType="VarChar(MAX)")] string fMsg, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsRead", DbType="Bit")] System.Nullable<bool> isRead)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), uid, dOF, fMsg, isRead);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Feedback_Update")]
	public int Feedback_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Fid", DbType="Int")] System.Nullable<int> fid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uid", DbType="Int")] System.Nullable<int> uid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOF", DbType="DateTime")] System.Nullable<System.DateTime> dOF, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FMsg", DbType="VarChar(MAX)")] string fMsg, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsRead", DbType="Bit")] System.Nullable<bool> isRead)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fid, uid, dOF, fMsg, isRead);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Law_Insert")]
	public int Law_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Ltype", DbType="VarChar(50)")] string ltype, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Ltitle", DbType="VarChar(50)")] string ltitle, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Ldescription", DbType="VarChar(MAX)")] string ldescription, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), ltype, ltitle, ldescription, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Law_Update")]
	public int Law_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lid", DbType="Int")] System.Nullable<int> lid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Ltype", DbType="VarChar(50)")] string ltype, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Ltitle", DbType="VarChar(50)")] string ltitle, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Ldescription", DbType="VarChar(MAX)")] string ldescription, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), lid, ltype, ltitle, ldescription, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Message_Insert")]
	public int Message_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uid", DbType="Int")] System.Nullable<int> uid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mtitle", DbType="VarChar(50)")] string mtitle, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Msgdetails", DbType="VarChar(MAX)")] string msgdetails, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOS", DbType="DateTime")] System.Nullable<System.DateTime> dOS, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), uid, mtitle, msgdetails, dOS, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Message_Update")]
	public int Message_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Msid", DbType="Int")] System.Nullable<int> msid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uid", DbType="Int")] System.Nullable<int> uid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mtitle", DbType="VarChar(50)")] string mtitle, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Msgdetails", DbType="VarChar(MAX)")] string msgdetails, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOS", DbType="DateTime")] System.Nullable<System.DateTime> dOS, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), msid, uid, mtitle, msgdetails, dOS, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.MessageTO_Insert")]
	public int MessageTO_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Msid", DbType="Int")] System.Nullable<int> msid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uid", DbType="Int")] System.Nullable<int> uid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsRead", DbType="Bit")] System.Nullable<bool> isRead)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), msid, uid, isRead);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.MessageTO_Update")]
	public int MessageTO_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Mtoid", DbType="Int")] System.Nullable<int> mtoid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Msid", DbType="Int")] System.Nullable<int> msid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uid", DbType="Int")] System.Nullable<int> uid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsRead", DbType="Bit")] System.Nullable<bool> isRead)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), mtoid, msid, uid, isRead);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PoliceStation_Insert")]
	public int PoliceStation_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Aid", DbType="Int")] System.Nullable<int> aid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTitle", DbType="VarChar(50)")] string pTitle, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PContactNo", DbType="VarChar(50)")] string pContactNo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PEmail", DbType="VarChar(50)")] string pEmail, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonContact", DbType="VarChar(50)")] string personContact, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), aid, pTitle, pContactNo, pEmail, personContact, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PoliceStation_Update")]
	public int PoliceStation_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Psid", DbType="Int")] System.Nullable<int> psid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Aid", DbType="Int")] System.Nullable<int> aid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PTitle", DbType="VarChar(50)")] string pTitle, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PContactNo", DbType="VarChar(50)")] string pContactNo, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PEmail", DbType="VarChar(50)")] string pEmail, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PersonContact", DbType="VarChar(50)")] string personContact, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), psid, aid, pTitle, pContactNo, pEmail, personContact, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UserType_Insert")]
	public int UserType_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Utypename", DbType="VarChar(50)")] string utypename, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), utypename, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UserType_Update")]
	public int UserType_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UtypeID", DbType="Int")] System.Nullable<int> utypeID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Utypename", DbType="VarChar(50)")] string utypename, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), utypeID, utypename, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Zone_Insert")]
	public int Zone_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Zname", DbType="VarChar(50)")] string zname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), zname, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Zone_Update")]
	public int Zone_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Zid", DbType="Int")] System.Nullable<int> zid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Zname", DbType="VarChar(50)")] string zname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), zid, zname, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CrimeType_Insert")]
	public int CrimeType_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CTName", DbType="VarChar(50)")] string cTName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), cTName, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CrimeType_Update")]
	public int CrimeType_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CrimeTypeId", DbType="Int")] System.Nullable<int> crimeTypeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CTName", DbType="VarChar(50)")] string cTName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), crimeTypeId, cTName, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Users_Insert")]
	public int Users_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uname", DbType="VarChar(50)")] string uname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ULname", DbType="VarChar(50)")] string uLname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UAdd", DbType="VarChar(MAX)")] string uAdd, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uph", DbType="VarChar(50)")] string uph, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uemailid", DbType="VarChar(50)")] string uemailid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Upassword", DbType="VarChar(50)")] string upassword, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> ugender, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UtypeID", DbType="Int")] System.Nullable<int> utypeID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOJ", DbType="DateTime")] System.Nullable<System.DateTime> dOJ, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lastseen", DbType="DateTime")] System.Nullable<System.DateTime> lastseen, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Usphoto", DbType="VarChar(50)")] string usphoto, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsAuthenticate", DbType="Bit")] System.Nullable<bool> isAuthenticate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Aid", DbType="Int")] System.Nullable<int> aid)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), uname, uLname, uAdd, uph, uemailid, upassword, ugender, utypeID, dOJ, lastseen, usphoto, isAuthenticate, aid);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Users_Upadte")]
	public int Users_Upadte([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uid", DbType="Int")] System.Nullable<int> uid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uname", DbType="VarChar(50)")] string uname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ULname", DbType="VarChar(50)")] string uLname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UAdd", DbType="VarChar(MAX)")] string uAdd, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uph", DbType="VarChar(50)")] string uph, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uemailid", DbType="VarChar(50)")] string uemailid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Upassword", DbType="VarChar(50)")] string upassword, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Bit")] System.Nullable<bool> ugender, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UtypeID", DbType="Int")] System.Nullable<int> utypeID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DOJ", DbType="DateTime")] System.Nullable<System.DateTime> dOJ, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lastseen", DbType="DateTime")] System.Nullable<System.DateTime> lastseen, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Usphoto", DbType="VarChar(50)")] string usphoto, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsAuthenticate", DbType="Bit")] System.Nullable<bool> isAuthenticate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Aid", DbType="Int")] System.Nullable<int> aid)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), uid, uname, uLname, uAdd, uph, uemailid, upassword, ugender, utypeID, dOJ, lastseen, usphoto, isAuthenticate, aid);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Criminal_Insert")]
	public int Criminal_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CrimeId", DbType="Int")] System.Nullable<int> crimeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uid", DbType="Int")] System.Nullable<int> uid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CrimeTypeID", DbType="Int")] System.Nullable<int> crimeTypeID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), crimeId, uid, crimeTypeID, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Criminal_Update")]
	public int Criminal_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Criminalid", DbType="Int")] System.Nullable<int> criminalid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CrimeId", DbType="Int")] System.Nullable<int> crimeId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Uid", DbType="Int")] System.Nullable<int> uid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CrimeTypeID", DbType="Int")] System.Nullable<int> crimeTypeID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), criminalid, crimeId, uid, crimeTypeID, isDisplay);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.News_Insert")]
	public int News_Insert([global::System.Data.Linq.Mapping.ParameterAttribute(Name="NTitle", DbType="VarChar(50)")] string nTitle, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NDescp", DbType="VarChar(MAX)")] string nDescp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NImg", DbType="VarChar(50)")] string nImg, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NDate", DbType="Date")] System.Nullable<System.DateTime> nDate)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nTitle, isDisplay, nDescp, nImg, nDate);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.News_Update")]
	public int News_Update([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Nid", DbType="Int")] System.Nullable<int> nid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NTitle", DbType="VarChar(50)")] string nTitle, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NDescp", DbType="VarChar(MAX)")] string nDescp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NImg", DbType="VarChar(50)")] string nImg, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsDisplay", DbType="Bit")] System.Nullable<bool> isDisplay, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NDate", DbType="Date")] System.Nullable<System.DateTime> nDate)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nid, nTitle, nDescp, nImg, isDisplay, nDate);
		return ((int)(result.ReturnValue));
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Area")]
public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Aid;
	
	private string _Aname;
	
	private System.Nullable<int> _Zcid;
	
	private System.Nullable<bool> _IsDisplay;
	
	private EntitySet<Crime> _Crimes;
	
	private EntitySet<PoliceStation> _PoliceStations;
	
	private EntitySet<User> _Users;
	
	private EntityRef<CityZone> _CityZone;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAidChanging(int value);
    partial void OnAidChanged();
    partial void OnAnameChanging(string value);
    partial void OnAnameChanged();
    partial void OnZcidChanging(System.Nullable<int> value);
    partial void OnZcidChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    #endregion
	
	public Area()
	{
		this._Crimes = new EntitySet<Crime>(new Action<Crime>(this.attach_Crimes), new Action<Crime>(this.detach_Crimes));
		this._PoliceStations = new EntitySet<PoliceStation>(new Action<PoliceStation>(this.attach_PoliceStations), new Action<PoliceStation>(this.detach_PoliceStations));
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		this._CityZone = default(EntityRef<CityZone>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Aid
	{
		get
		{
			return this._Aid;
		}
		set
		{
			if ((this._Aid != value))
			{
				this.OnAidChanging(value);
				this.SendPropertyChanging();
				this._Aid = value;
				this.SendPropertyChanged("Aid");
				this.OnAidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aname", DbType="VarChar(50)")]
	public string Aname
	{
		get
		{
			return this._Aname;
		}
		set
		{
			if ((this._Aname != value))
			{
				this.OnAnameChanging(value);
				this.SendPropertyChanging();
				this._Aname = value;
				this.SendPropertyChanged("Aname");
				this.OnAnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zcid", DbType="Int")]
	public System.Nullable<int> Zcid
	{
		get
		{
			return this._Zcid;
		}
		set
		{
			if ((this._Zcid != value))
			{
				if (this._CityZone.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnZcidChanging(value);
				this.SendPropertyChanging();
				this._Zcid = value;
				this.SendPropertyChanged("Zcid");
				this.OnZcidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Crime", Storage="_Crimes", ThisKey="Aid", OtherKey="Aid")]
	public EntitySet<Crime> Crimes
	{
		get
		{
			return this._Crimes;
		}
		set
		{
			this._Crimes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_PoliceStation", Storage="_PoliceStations", ThisKey="Aid", OtherKey="Aid")]
	public EntitySet<PoliceStation> PoliceStations
	{
		get
		{
			return this._PoliceStations;
		}
		set
		{
			this._PoliceStations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_User", Storage="_Users", ThisKey="Aid", OtherKey="Aid")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CityZone_Area", Storage="_CityZone", ThisKey="Zcid", OtherKey="Zcid", IsForeignKey=true)]
	public CityZone CityZone
	{
		get
		{
			return this._CityZone.Entity;
		}
		set
		{
			CityZone previousValue = this._CityZone.Entity;
			if (((previousValue != value) 
						|| (this._CityZone.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CityZone.Entity = null;
					previousValue.Areas.Remove(this);
				}
				this._CityZone.Entity = value;
				if ((value != null))
				{
					value.Areas.Add(this);
					this._Zcid = value.Zcid;
				}
				else
				{
					this._Zcid = default(Nullable<int>);
				}
				this.SendPropertyChanged("CityZone");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Crimes(Crime entity)
	{
		this.SendPropertyChanging();
		entity.Area = this;
	}
	
	private void detach_Crimes(Crime entity)
	{
		this.SendPropertyChanging();
		entity.Area = null;
	}
	
	private void attach_PoliceStations(PoliceStation entity)
	{
		this.SendPropertyChanging();
		entity.Area = this;
	}
	
	private void detach_PoliceStations(PoliceStation entity)
	{
		this.SendPropertyChanging();
		entity.Area = null;
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Area = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.Area = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Cid;
	
	private string _Cname;
	
	private System.Nullable<bool> _IsDisplay;
	
	private EntitySet<CityZone> _CityZones;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCidChanging(int value);
    partial void OnCidChanged();
    partial void OnCnameChanging(string value);
    partial void OnCnameChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    #endregion
	
	public City()
	{
		this._CityZones = new EntitySet<CityZone>(new Action<CityZone>(this.attach_CityZones), new Action<CityZone>(this.detach_CityZones));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Cid
	{
		get
		{
			return this._Cid;
		}
		set
		{
			if ((this._Cid != value))
			{
				this.OnCidChanging(value);
				this.SendPropertyChanging();
				this._Cid = value;
				this.SendPropertyChanged("Cid");
				this.OnCidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cname", DbType="VarChar(50)")]
	public string Cname
	{
		get
		{
			return this._Cname;
		}
		set
		{
			if ((this._Cname != value))
			{
				this.OnCnameChanging(value);
				this.SendPropertyChanging();
				this._Cname = value;
				this.SendPropertyChanged("Cname");
				this.OnCnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_CityZone", Storage="_CityZones", ThisKey="Cid", OtherKey="Cid")]
	public EntitySet<CityZone> CityZones
	{
		get
		{
			return this._CityZones;
		}
		set
		{
			this._CityZones.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CityZones(CityZone entity)
	{
		this.SendPropertyChanging();
		entity.City = this;
	}
	
	private void detach_CityZones(CityZone entity)
	{
		this.SendPropertyChanging();
		entity.City = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CityZone")]
public partial class CityZone : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Zcid;
	
	private System.Nullable<int> _Cid;
	
	private System.Nullable<int> _Zid;
	
	private System.Nullable<bool> _IsDisplay;
	
	private EntitySet<Area> _Areas;
	
	private EntityRef<City> _City;
	
	private EntityRef<Zone> _Zone;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZcidChanging(int value);
    partial void OnZcidChanged();
    partial void OnCidChanging(System.Nullable<int> value);
    partial void OnCidChanged();
    partial void OnZidChanging(System.Nullable<int> value);
    partial void OnZidChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    #endregion
	
	public CityZone()
	{
		this._Areas = new EntitySet<Area>(new Action<Area>(this.attach_Areas), new Action<Area>(this.detach_Areas));
		this._City = default(EntityRef<City>);
		this._Zone = default(EntityRef<Zone>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zcid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Zcid
	{
		get
		{
			return this._Zcid;
		}
		set
		{
			if ((this._Zcid != value))
			{
				this.OnZcidChanging(value);
				this.SendPropertyChanging();
				this._Zcid = value;
				this.SendPropertyChanged("Zcid");
				this.OnZcidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cid", DbType="Int")]
	public System.Nullable<int> Cid
	{
		get
		{
			return this._Cid;
		}
		set
		{
			if ((this._Cid != value))
			{
				if (this._City.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCidChanging(value);
				this.SendPropertyChanging();
				this._Cid = value;
				this.SendPropertyChanged("Cid");
				this.OnCidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zid", DbType="Int")]
	public System.Nullable<int> Zid
	{
		get
		{
			return this._Zid;
		}
		set
		{
			if ((this._Zid != value))
			{
				if (this._Zone.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnZidChanging(value);
				this.SendPropertyChanging();
				this._Zid = value;
				this.SendPropertyChanged("Zid");
				this.OnZidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CityZone_Area", Storage="_Areas", ThisKey="Zcid", OtherKey="Zcid")]
	public EntitySet<Area> Areas
	{
		get
		{
			return this._Areas;
		}
		set
		{
			this._Areas.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_CityZone", Storage="_City", ThisKey="Cid", OtherKey="Cid", IsForeignKey=true)]
	public City City
	{
		get
		{
			return this._City.Entity;
		}
		set
		{
			City previousValue = this._City.Entity;
			if (((previousValue != value) 
						|| (this._City.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._City.Entity = null;
					previousValue.CityZones.Remove(this);
				}
				this._City.Entity = value;
				if ((value != null))
				{
					value.CityZones.Add(this);
					this._Cid = value.Cid;
				}
				else
				{
					this._Cid = default(Nullable<int>);
				}
				this.SendPropertyChanged("City");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Zone_CityZone", Storage="_Zone", ThisKey="Zid", OtherKey="Zid", IsForeignKey=true)]
	public Zone Zone
	{
		get
		{
			return this._Zone.Entity;
		}
		set
		{
			Zone previousValue = this._Zone.Entity;
			if (((previousValue != value) 
						|| (this._Zone.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Zone.Entity = null;
					previousValue.CityZones.Remove(this);
				}
				this._Zone.Entity = value;
				if ((value != null))
				{
					value.CityZones.Add(this);
					this._Zid = value.Zid;
				}
				else
				{
					this._Zid = default(Nullable<int>);
				}
				this.SendPropertyChanged("Zone");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Areas(Area entity)
	{
		this.SendPropertyChanging();
		entity.CityZone = this;
	}
	
	private void detach_Areas(Area entity)
	{
		this.SendPropertyChanging();
		entity.CityZone = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Crime")]
public partial class Crime : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CrimeId;
	
	private System.Nullable<int> _Aid;
	
	private System.Nullable<int> _Uid;
	
	private System.Nullable<int> _CrimeTypeId;
	
	private string _Priority;
	
	private System.Nullable<System.DateTime> _DOC;
	
	private System.Nullable<System.DateTime> _DOU;
	
	private System.Nullable<bool> _IsDone;
	
	private string _Crimedetails;
	
	private string _Detail;
	
	private EntitySet<CrimePic> _CrimePics;
	
	private EntitySet<Criminal> _Criminals;
	
	private EntityRef<Area> _Area;
	
	private EntityRef<CrimeType> _CrimeType;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCrimeIdChanging(int value);
    partial void OnCrimeIdChanged();
    partial void OnAidChanging(System.Nullable<int> value);
    partial void OnAidChanged();
    partial void OnUidChanging(System.Nullable<int> value);
    partial void OnUidChanged();
    partial void OnCrimeTypeIdChanging(System.Nullable<int> value);
    partial void OnCrimeTypeIdChanged();
    partial void OnPriorityChanging(string value);
    partial void OnPriorityChanged();
    partial void OnDOCChanging(System.Nullable<System.DateTime> value);
    partial void OnDOCChanged();
    partial void OnDOUChanging(System.Nullable<System.DateTime> value);
    partial void OnDOUChanged();
    partial void OnIsDoneChanging(System.Nullable<bool> value);
    partial void OnIsDoneChanged();
    partial void OnCrimedetailsChanging(string value);
    partial void OnCrimedetailsChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    #endregion
	
	public Crime()
	{
		this._CrimePics = new EntitySet<CrimePic>(new Action<CrimePic>(this.attach_CrimePics), new Action<CrimePic>(this.detach_CrimePics));
		this._Criminals = new EntitySet<Criminal>(new Action<Criminal>(this.attach_Criminals), new Action<Criminal>(this.detach_Criminals));
		this._Area = default(EntityRef<Area>);
		this._CrimeType = default(EntityRef<CrimeType>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrimeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CrimeId
	{
		get
		{
			return this._CrimeId;
		}
		set
		{
			if ((this._CrimeId != value))
			{
				this.OnCrimeIdChanging(value);
				this.SendPropertyChanging();
				this._CrimeId = value;
				this.SendPropertyChanged("CrimeId");
				this.OnCrimeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aid", DbType="Int")]
	public System.Nullable<int> Aid
	{
		get
		{
			return this._Aid;
		}
		set
		{
			if ((this._Aid != value))
			{
				if (this._Area.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAidChanging(value);
				this.SendPropertyChanging();
				this._Aid = value;
				this.SendPropertyChanged("Aid");
				this.OnAidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="Int")]
	public System.Nullable<int> Uid
	{
		get
		{
			return this._Uid;
		}
		set
		{
			if ((this._Uid != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUidChanging(value);
				this.SendPropertyChanging();
				this._Uid = value;
				this.SendPropertyChanged("Uid");
				this.OnUidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrimeTypeId", DbType="Int")]
	public System.Nullable<int> CrimeTypeId
	{
		get
		{
			return this._CrimeTypeId;
		}
		set
		{
			if ((this._CrimeTypeId != value))
			{
				if (this._CrimeType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCrimeTypeIdChanging(value);
				this.SendPropertyChanging();
				this._CrimeTypeId = value;
				this.SendPropertyChanged("CrimeTypeId");
				this.OnCrimeTypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="VarChar(50)")]
	public string Priority
	{
		get
		{
			return this._Priority;
		}
		set
		{
			if ((this._Priority != value))
			{
				this.OnPriorityChanging(value);
				this.SendPropertyChanging();
				this._Priority = value;
				this.SendPropertyChanged("Priority");
				this.OnPriorityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOC", DbType="DateTime")]
	public System.Nullable<System.DateTime> DOC
	{
		get
		{
			return this._DOC;
		}
		set
		{
			if ((this._DOC != value))
			{
				this.OnDOCChanging(value);
				this.SendPropertyChanging();
				this._DOC = value;
				this.SendPropertyChanged("DOC");
				this.OnDOCChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOU", DbType="DateTime")]
	public System.Nullable<System.DateTime> DOU
	{
		get
		{
			return this._DOU;
		}
		set
		{
			if ((this._DOU != value))
			{
				this.OnDOUChanging(value);
				this.SendPropertyChanging();
				this._DOU = value;
				this.SendPropertyChanged("DOU");
				this.OnDOUChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDone", DbType="Bit")]
	public System.Nullable<bool> IsDone
	{
		get
		{
			return this._IsDone;
		}
		set
		{
			if ((this._IsDone != value))
			{
				this.OnIsDoneChanging(value);
				this.SendPropertyChanging();
				this._IsDone = value;
				this.SendPropertyChanged("IsDone");
				this.OnIsDoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Crimedetails", DbType="VarChar(MAX)")]
	public string Crimedetails
	{
		get
		{
			return this._Crimedetails;
		}
		set
		{
			if ((this._Crimedetails != value))
			{
				this.OnCrimedetailsChanging(value);
				this.SendPropertyChanging();
				this._Crimedetails = value;
				this.SendPropertyChanged("Crimedetails");
				this.OnCrimedetailsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Detail", DbType="VarChar(MAX)")]
	public string Detail
	{
		get
		{
			return this._Detail;
		}
		set
		{
			if ((this._Detail != value))
			{
				this.OnDetailChanging(value);
				this.SendPropertyChanging();
				this._Detail = value;
				this.SendPropertyChanged("Detail");
				this.OnDetailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crime_CrimePic", Storage="_CrimePics", ThisKey="CrimeId", OtherKey="CrimeId")]
	public EntitySet<CrimePic> CrimePics
	{
		get
		{
			return this._CrimePics;
		}
		set
		{
			this._CrimePics.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crime_Criminal", Storage="_Criminals", ThisKey="CrimeId", OtherKey="CrimeId")]
	public EntitySet<Criminal> Criminals
	{
		get
		{
			return this._Criminals;
		}
		set
		{
			this._Criminals.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_Crime", Storage="_Area", ThisKey="Aid", OtherKey="Aid", IsForeignKey=true)]
	public Area Area
	{
		get
		{
			return this._Area.Entity;
		}
		set
		{
			Area previousValue = this._Area.Entity;
			if (((previousValue != value) 
						|| (this._Area.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Area.Entity = null;
					previousValue.Crimes.Remove(this);
				}
				this._Area.Entity = value;
				if ((value != null))
				{
					value.Crimes.Add(this);
					this._Aid = value.Aid;
				}
				else
				{
					this._Aid = default(Nullable<int>);
				}
				this.SendPropertyChanged("Area");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CrimeType_Crime", Storage="_CrimeType", ThisKey="CrimeTypeId", OtherKey="CrimeTypeId", IsForeignKey=true)]
	public CrimeType CrimeType
	{
		get
		{
			return this._CrimeType.Entity;
		}
		set
		{
			CrimeType previousValue = this._CrimeType.Entity;
			if (((previousValue != value) 
						|| (this._CrimeType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CrimeType.Entity = null;
					previousValue.Crimes.Remove(this);
				}
				this._CrimeType.Entity = value;
				if ((value != null))
				{
					value.Crimes.Add(this);
					this._CrimeTypeId = value.CrimeTypeId;
				}
				else
				{
					this._CrimeTypeId = default(Nullable<int>);
				}
				this.SendPropertyChanged("CrimeType");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Crime", Storage="_User", ThisKey="Uid", OtherKey="Uid", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Crimes.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Crimes.Add(this);
					this._Uid = value.Uid;
				}
				else
				{
					this._Uid = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CrimePics(CrimePic entity)
	{
		this.SendPropertyChanging();
		entity.Crime = this;
	}
	
	private void detach_CrimePics(CrimePic entity)
	{
		this.SendPropertyChanging();
		entity.Crime = null;
	}
	
	private void attach_Criminals(Criminal entity)
	{
		this.SendPropertyChanging();
		entity.Crime = this;
	}
	
	private void detach_Criminals(Criminal entity)
	{
		this.SendPropertyChanging();
		entity.Crime = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CrimePics")]
public partial class CrimePic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Cpid;
	
	private System.Nullable<int> _CrimeId;
	
	private string _CrimePath;
	
	private System.Nullable<bool> _IsDisplay;
	
	private EntityRef<Crime> _Crime;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCpidChanging(int value);
    partial void OnCpidChanged();
    partial void OnCrimeIdChanging(System.Nullable<int> value);
    partial void OnCrimeIdChanged();
    partial void OnCrimePathChanging(string value);
    partial void OnCrimePathChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    #endregion
	
	public CrimePic()
	{
		this._Crime = default(EntityRef<Crime>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cpid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Cpid
	{
		get
		{
			return this._Cpid;
		}
		set
		{
			if ((this._Cpid != value))
			{
				this.OnCpidChanging(value);
				this.SendPropertyChanging();
				this._Cpid = value;
				this.SendPropertyChanged("Cpid");
				this.OnCpidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrimeId", DbType="Int")]
	public System.Nullable<int> CrimeId
	{
		get
		{
			return this._CrimeId;
		}
		set
		{
			if ((this._CrimeId != value))
			{
				if (this._Crime.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCrimeIdChanging(value);
				this.SendPropertyChanging();
				this._CrimeId = value;
				this.SendPropertyChanged("CrimeId");
				this.OnCrimeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrimePath", DbType="VarChar(50)")]
	public string CrimePath
	{
		get
		{
			return this._CrimePath;
		}
		set
		{
			if ((this._CrimePath != value))
			{
				this.OnCrimePathChanging(value);
				this.SendPropertyChanging();
				this._CrimePath = value;
				this.SendPropertyChanged("CrimePath");
				this.OnCrimePathChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crime_CrimePic", Storage="_Crime", ThisKey="CrimeId", OtherKey="CrimeId", IsForeignKey=true)]
	public Crime Crime
	{
		get
		{
			return this._Crime.Entity;
		}
		set
		{
			Crime previousValue = this._Crime.Entity;
			if (((previousValue != value) 
						|| (this._Crime.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Crime.Entity = null;
					previousValue.CrimePics.Remove(this);
				}
				this._Crime.Entity = value;
				if ((value != null))
				{
					value.CrimePics.Add(this);
					this._CrimeId = value.CrimeId;
				}
				else
				{
					this._CrimeId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Crime");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feedback")]
public partial class Feedback : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Fid;
	
	private System.Nullable<int> _Uid;
	
	private System.Nullable<System.DateTime> _DOF;
	
	private System.Nullable<bool> _IsRead;
	
	private string _FMsg;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFidChanging(int value);
    partial void OnFidChanged();
    partial void OnUidChanging(System.Nullable<int> value);
    partial void OnUidChanged();
    partial void OnDOFChanging(System.Nullable<System.DateTime> value);
    partial void OnDOFChanged();
    partial void OnIsReadChanging(System.Nullable<bool> value);
    partial void OnIsReadChanged();
    partial void OnFMsgChanging(string value);
    partial void OnFMsgChanged();
    #endregion
	
	public Feedback()
	{
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Fid
	{
		get
		{
			return this._Fid;
		}
		set
		{
			if ((this._Fid != value))
			{
				this.OnFidChanging(value);
				this.SendPropertyChanging();
				this._Fid = value;
				this.SendPropertyChanged("Fid");
				this.OnFidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="Int")]
	public System.Nullable<int> Uid
	{
		get
		{
			return this._Uid;
		}
		set
		{
			if ((this._Uid != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUidChanging(value);
				this.SendPropertyChanging();
				this._Uid = value;
				this.SendPropertyChanged("Uid");
				this.OnUidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOF", DbType="DateTime")]
	public System.Nullable<System.DateTime> DOF
	{
		get
		{
			return this._DOF;
		}
		set
		{
			if ((this._DOF != value))
			{
				this.OnDOFChanging(value);
				this.SendPropertyChanging();
				this._DOF = value;
				this.SendPropertyChanged("DOF");
				this.OnDOFChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit")]
	public System.Nullable<bool> IsRead
	{
		get
		{
			return this._IsRead;
		}
		set
		{
			if ((this._IsRead != value))
			{
				this.OnIsReadChanging(value);
				this.SendPropertyChanging();
				this._IsRead = value;
				this.SendPropertyChanged("IsRead");
				this.OnIsReadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FMsg", DbType="VarChar(MAX)")]
	public string FMsg
	{
		get
		{
			return this._FMsg;
		}
		set
		{
			if ((this._FMsg != value))
			{
				this.OnFMsgChanging(value);
				this.SendPropertyChanging();
				this._FMsg = value;
				this.SendPropertyChanged("FMsg");
				this.OnFMsgChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Feedback", Storage="_User", ThisKey="Uid", OtherKey="Uid", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Feedbacks.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Feedbacks.Add(this);
					this._Uid = value.Uid;
				}
				else
				{
					this._Uid = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Law")]
public partial class Law : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Lid;
	
	private string _Ltype;
	
	private string _Ltitle;
	
	private System.Nullable<bool> _IsDisplay;
	
	private string _Ldescription;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLidChanging(int value);
    partial void OnLidChanged();
    partial void OnLtypeChanging(string value);
    partial void OnLtypeChanged();
    partial void OnLtitleChanging(string value);
    partial void OnLtitleChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    partial void OnLdescriptionChanging(string value);
    partial void OnLdescriptionChanged();
    #endregion
	
	public Law()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Lid
	{
		get
		{
			return this._Lid;
		}
		set
		{
			if ((this._Lid != value))
			{
				this.OnLidChanging(value);
				this.SendPropertyChanging();
				this._Lid = value;
				this.SendPropertyChanged("Lid");
				this.OnLidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ltype", DbType="VarChar(50)")]
	public string Ltype
	{
		get
		{
			return this._Ltype;
		}
		set
		{
			if ((this._Ltype != value))
			{
				this.OnLtypeChanging(value);
				this.SendPropertyChanging();
				this._Ltype = value;
				this.SendPropertyChanged("Ltype");
				this.OnLtypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ltitle", DbType="VarChar(50)")]
	public string Ltitle
	{
		get
		{
			return this._Ltitle;
		}
		set
		{
			if ((this._Ltitle != value))
			{
				this.OnLtitleChanging(value);
				this.SendPropertyChanging();
				this._Ltitle = value;
				this.SendPropertyChanged("Ltitle");
				this.OnLtitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ldescription", DbType="VarChar(MAX)")]
	public string Ldescription
	{
		get
		{
			return this._Ldescription;
		}
		set
		{
			if ((this._Ldescription != value))
			{
				this.OnLdescriptionChanging(value);
				this.SendPropertyChanging();
				this._Ldescription = value;
				this.SendPropertyChanged("Ldescription");
				this.OnLdescriptionChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Message")]
public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Msid;
	
	private System.Nullable<int> _Uid;
	
	private string _Mtitle;
	
	private System.Nullable<System.DateTime> _DOS;
	
	private System.Nullable<bool> _IsDisplay;
	
	private string _Msgdetails;
	
	private EntitySet<MessageTO> _MessageTOs;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMsidChanging(int value);
    partial void OnMsidChanged();
    partial void OnUidChanging(System.Nullable<int> value);
    partial void OnUidChanged();
    partial void OnMtitleChanging(string value);
    partial void OnMtitleChanged();
    partial void OnDOSChanging(System.Nullable<System.DateTime> value);
    partial void OnDOSChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    partial void OnMsgdetailsChanging(string value);
    partial void OnMsgdetailsChanged();
    #endregion
	
	public Message()
	{
		this._MessageTOs = new EntitySet<MessageTO>(new Action<MessageTO>(this.attach_MessageTOs), new Action<MessageTO>(this.detach_MessageTOs));
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Msid
	{
		get
		{
			return this._Msid;
		}
		set
		{
			if ((this._Msid != value))
			{
				this.OnMsidChanging(value);
				this.SendPropertyChanging();
				this._Msid = value;
				this.SendPropertyChanged("Msid");
				this.OnMsidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="Int")]
	public System.Nullable<int> Uid
	{
		get
		{
			return this._Uid;
		}
		set
		{
			if ((this._Uid != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUidChanging(value);
				this.SendPropertyChanging();
				this._Uid = value;
				this.SendPropertyChanged("Uid");
				this.OnUidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mtitle", DbType="VarChar(50)")]
	public string Mtitle
	{
		get
		{
			return this._Mtitle;
		}
		set
		{
			if ((this._Mtitle != value))
			{
				this.OnMtitleChanging(value);
				this.SendPropertyChanging();
				this._Mtitle = value;
				this.SendPropertyChanged("Mtitle");
				this.OnMtitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOS", DbType="DateTime")]
	public System.Nullable<System.DateTime> DOS
	{
		get
		{
			return this._DOS;
		}
		set
		{
			if ((this._DOS != value))
			{
				this.OnDOSChanging(value);
				this.SendPropertyChanging();
				this._DOS = value;
				this.SendPropertyChanged("DOS");
				this.OnDOSChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msgdetails", DbType="VarChar(MAX)")]
	public string Msgdetails
	{
		get
		{
			return this._Msgdetails;
		}
		set
		{
			if ((this._Msgdetails != value))
			{
				this.OnMsgdetailsChanging(value);
				this.SendPropertyChanging();
				this._Msgdetails = value;
				this.SendPropertyChanged("Msgdetails");
				this.OnMsgdetailsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_MessageTO", Storage="_MessageTOs", ThisKey="Msid", OtherKey="Msid")]
	public EntitySet<MessageTO> MessageTOs
	{
		get
		{
			return this._MessageTOs;
		}
		set
		{
			this._MessageTOs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_User", ThisKey="Uid", OtherKey="Uid", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Messages.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Messages.Add(this);
					this._Uid = value.Uid;
				}
				else
				{
					this._Uid = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_MessageTOs(MessageTO entity)
	{
		this.SendPropertyChanging();
		entity.Message = this;
	}
	
	private void detach_MessageTOs(MessageTO entity)
	{
		this.SendPropertyChanging();
		entity.Message = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MessageTO")]
public partial class MessageTO : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Mtoid;
	
	private System.Nullable<int> _Msid;
	
	private System.Nullable<int> _Uid;
	
	private System.Nullable<bool> _IsRead;
	
	private EntityRef<Message> _Message;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMtoidChanging(int value);
    partial void OnMtoidChanged();
    partial void OnMsidChanging(System.Nullable<int> value);
    partial void OnMsidChanged();
    partial void OnUidChanging(System.Nullable<int> value);
    partial void OnUidChanged();
    partial void OnIsReadChanging(System.Nullable<bool> value);
    partial void OnIsReadChanged();
    #endregion
	
	public MessageTO()
	{
		this._Message = default(EntityRef<Message>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mtoid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Mtoid
	{
		get
		{
			return this._Mtoid;
		}
		set
		{
			if ((this._Mtoid != value))
			{
				this.OnMtoidChanging(value);
				this.SendPropertyChanging();
				this._Mtoid = value;
				this.SendPropertyChanged("Mtoid");
				this.OnMtoidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Msid", DbType="Int")]
	public System.Nullable<int> Msid
	{
		get
		{
			return this._Msid;
		}
		set
		{
			if ((this._Msid != value))
			{
				if (this._Message.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMsidChanging(value);
				this.SendPropertyChanging();
				this._Msid = value;
				this.SendPropertyChanged("Msid");
				this.OnMsidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="Int")]
	public System.Nullable<int> Uid
	{
		get
		{
			return this._Uid;
		}
		set
		{
			if ((this._Uid != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUidChanging(value);
				this.SendPropertyChanging();
				this._Uid = value;
				this.SendPropertyChanged("Uid");
				this.OnUidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit")]
	public System.Nullable<bool> IsRead
	{
		get
		{
			return this._IsRead;
		}
		set
		{
			if ((this._IsRead != value))
			{
				this.OnIsReadChanging(value);
				this.SendPropertyChanging();
				this._IsRead = value;
				this.SendPropertyChanged("IsRead");
				this.OnIsReadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Message_MessageTO", Storage="_Message", ThisKey="Msid", OtherKey="Msid", IsForeignKey=true)]
	public Message Message
	{
		get
		{
			return this._Message.Entity;
		}
		set
		{
			Message previousValue = this._Message.Entity;
			if (((previousValue != value) 
						|| (this._Message.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Message.Entity = null;
					previousValue.MessageTOs.Remove(this);
				}
				this._Message.Entity = value;
				if ((value != null))
				{
					value.MessageTOs.Add(this);
					this._Msid = value.Msid;
				}
				else
				{
					this._Msid = default(Nullable<int>);
				}
				this.SendPropertyChanged("Message");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MessageTO", Storage="_User", ThisKey="Uid", OtherKey="Uid", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.MessageTOs.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.MessageTOs.Add(this);
					this._Uid = value.Uid;
				}
				else
				{
					this._Uid = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PoliceStation")]
public partial class PoliceStation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Psid;
	
	private System.Nullable<int> _Aid;
	
	private string _PTitle;
	
	private string _PContactNo;
	
	private string _PEmail;
	
	private string _PersonContact;
	
	private System.Nullable<bool> _IsDisplay;
	
	private EntityRef<Area> _Area;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPsidChanging(int value);
    partial void OnPsidChanged();
    partial void OnAidChanging(System.Nullable<int> value);
    partial void OnAidChanged();
    partial void OnPTitleChanging(string value);
    partial void OnPTitleChanged();
    partial void OnPContactNoChanging(string value);
    partial void OnPContactNoChanged();
    partial void OnPEmailChanging(string value);
    partial void OnPEmailChanged();
    partial void OnPersonContactChanging(string value);
    partial void OnPersonContactChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    #endregion
	
	public PoliceStation()
	{
		this._Area = default(EntityRef<Area>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Psid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Psid
	{
		get
		{
			return this._Psid;
		}
		set
		{
			if ((this._Psid != value))
			{
				this.OnPsidChanging(value);
				this.SendPropertyChanging();
				this._Psid = value;
				this.SendPropertyChanged("Psid");
				this.OnPsidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aid", DbType="Int")]
	public System.Nullable<int> Aid
	{
		get
		{
			return this._Aid;
		}
		set
		{
			if ((this._Aid != value))
			{
				if (this._Area.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAidChanging(value);
				this.SendPropertyChanging();
				this._Aid = value;
				this.SendPropertyChanged("Aid");
				this.OnAidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PTitle", DbType="VarChar(50)")]
	public string PTitle
	{
		get
		{
			return this._PTitle;
		}
		set
		{
			if ((this._PTitle != value))
			{
				this.OnPTitleChanging(value);
				this.SendPropertyChanging();
				this._PTitle = value;
				this.SendPropertyChanged("PTitle");
				this.OnPTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PContactNo", DbType="VarChar(50)")]
	public string PContactNo
	{
		get
		{
			return this._PContactNo;
		}
		set
		{
			if ((this._PContactNo != value))
			{
				this.OnPContactNoChanging(value);
				this.SendPropertyChanging();
				this._PContactNo = value;
				this.SendPropertyChanged("PContactNo");
				this.OnPContactNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PEmail", DbType="VarChar(50)")]
	public string PEmail
	{
		get
		{
			return this._PEmail;
		}
		set
		{
			if ((this._PEmail != value))
			{
				this.OnPEmailChanging(value);
				this.SendPropertyChanging();
				this._PEmail = value;
				this.SendPropertyChanged("PEmail");
				this.OnPEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonContact", DbType="VarChar(50)")]
	public string PersonContact
	{
		get
		{
			return this._PersonContact;
		}
		set
		{
			if ((this._PersonContact != value))
			{
				this.OnPersonContactChanging(value);
				this.SendPropertyChanging();
				this._PersonContact = value;
				this.SendPropertyChanged("PersonContact");
				this.OnPersonContactChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_PoliceStation", Storage="_Area", ThisKey="Aid", OtherKey="Aid", IsForeignKey=true)]
	public Area Area
	{
		get
		{
			return this._Area.Entity;
		}
		set
		{
			Area previousValue = this._Area.Entity;
			if (((previousValue != value) 
						|| (this._Area.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Area.Entity = null;
					previousValue.PoliceStations.Remove(this);
				}
				this._Area.Entity = value;
				if ((value != null))
				{
					value.PoliceStations.Add(this);
					this._Aid = value.Aid;
				}
				else
				{
					this._Aid = default(Nullable<int>);
				}
				this.SendPropertyChanged("Area");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserType")]
public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UtypeID;
	
	private string _Utypename;
	
	private System.Nullable<bool> _IsDisplay;
	
	private EntitySet<User> _Users;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUtypeIDChanging(int value);
    partial void OnUtypeIDChanged();
    partial void OnUtypenameChanging(string value);
    partial void OnUtypenameChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    #endregion
	
	public UserType()
	{
		this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UtypeID
	{
		get
		{
			return this._UtypeID;
		}
		set
		{
			if ((this._UtypeID != value))
			{
				this.OnUtypeIDChanging(value);
				this.SendPropertyChanging();
				this._UtypeID = value;
				this.SendPropertyChanged("UtypeID");
				this.OnUtypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Utypename", DbType="VarChar(50)")]
	public string Utypename
	{
		get
		{
			return this._Utypename;
		}
		set
		{
			if ((this._Utypename != value))
			{
				this.OnUtypenameChanging(value);
				this.SendPropertyChanging();
				this._Utypename = value;
				this.SendPropertyChanged("Utypename");
				this.OnUtypenameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_Users", ThisKey="UtypeID", OtherKey="UtypeID")]
	public EntitySet<User> Users
	{
		get
		{
			return this._Users;
		}
		set
		{
			this._Users.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.UserType = this;
	}
	
	private void detach_Users(User entity)
	{
		this.SendPropertyChanging();
		entity.UserType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Zone")]
public partial class Zone : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Zid;
	
	private string _Zname;
	
	private System.Nullable<bool> _IsDisplay;
	
	private EntitySet<CityZone> _CityZones;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZidChanging(int value);
    partial void OnZidChanged();
    partial void OnZnameChanging(string value);
    partial void OnZnameChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    #endregion
	
	public Zone()
	{
		this._CityZones = new EntitySet<CityZone>(new Action<CityZone>(this.attach_CityZones), new Action<CityZone>(this.detach_CityZones));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Zid
	{
		get
		{
			return this._Zid;
		}
		set
		{
			if ((this._Zid != value))
			{
				this.OnZidChanging(value);
				this.SendPropertyChanging();
				this._Zid = value;
				this.SendPropertyChanged("Zid");
				this.OnZidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zname", DbType="VarChar(50)")]
	public string Zname
	{
		get
		{
			return this._Zname;
		}
		set
		{
			if ((this._Zname != value))
			{
				this.OnZnameChanging(value);
				this.SendPropertyChanging();
				this._Zname = value;
				this.SendPropertyChanged("Zname");
				this.OnZnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Zone_CityZone", Storage="_CityZones", ThisKey="Zid", OtherKey="Zid")]
	public EntitySet<CityZone> CityZones
	{
		get
		{
			return this._CityZones;
		}
		set
		{
			this._CityZones.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_CityZones(CityZone entity)
	{
		this.SendPropertyChanging();
		entity.Zone = this;
	}
	
	private void detach_CityZones(CityZone entity)
	{
		this.SendPropertyChanging();
		entity.Zone = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CrimeType")]
public partial class CrimeType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CrimeTypeId;
	
	private string _CTName;
	
	private System.Nullable<bool> _IsDisplay;
	
	private EntitySet<Crime> _Crimes;
	
	private EntitySet<Criminal> _Criminals;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCrimeTypeIdChanging(int value);
    partial void OnCrimeTypeIdChanged();
    partial void OnCTNameChanging(string value);
    partial void OnCTNameChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    #endregion
	
	public CrimeType()
	{
		this._Crimes = new EntitySet<Crime>(new Action<Crime>(this.attach_Crimes), new Action<Crime>(this.detach_Crimes));
		this._Criminals = new EntitySet<Criminal>(new Action<Criminal>(this.attach_Criminals), new Action<Criminal>(this.detach_Criminals));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrimeTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CrimeTypeId
	{
		get
		{
			return this._CrimeTypeId;
		}
		set
		{
			if ((this._CrimeTypeId != value))
			{
				this.OnCrimeTypeIdChanging(value);
				this.SendPropertyChanging();
				this._CrimeTypeId = value;
				this.SendPropertyChanged("CrimeTypeId");
				this.OnCrimeTypeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CTName", DbType="VarChar(50)")]
	public string CTName
	{
		get
		{
			return this._CTName;
		}
		set
		{
			if ((this._CTName != value))
			{
				this.OnCTNameChanging(value);
				this.SendPropertyChanging();
				this._CTName = value;
				this.SendPropertyChanged("CTName");
				this.OnCTNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CrimeType_Crime", Storage="_Crimes", ThisKey="CrimeTypeId", OtherKey="CrimeTypeId")]
	public EntitySet<Crime> Crimes
	{
		get
		{
			return this._Crimes;
		}
		set
		{
			this._Crimes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CrimeType_Criminal", Storage="_Criminals", ThisKey="CrimeTypeId", OtherKey="CrimeTypeID")]
	public EntitySet<Criminal> Criminals
	{
		get
		{
			return this._Criminals;
		}
		set
		{
			this._Criminals.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Crimes(Crime entity)
	{
		this.SendPropertyChanging();
		entity.CrimeType = this;
	}
	
	private void detach_Crimes(Crime entity)
	{
		this.SendPropertyChanging();
		entity.CrimeType = null;
	}
	
	private void attach_Criminals(Criminal entity)
	{
		this.SendPropertyChanging();
		entity.CrimeType = this;
	}
	
	private void detach_Criminals(Criminal entity)
	{
		this.SendPropertyChanging();
		entity.CrimeType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Uid;
	
	private string _Uname;
	
	private string _ULname;
	
	private string _Uph;
	
	private string _Uemailid;
	
	private string _Upassword;
	
	private System.Nullable<bool> _ugender;
	
	private System.Nullable<int> _UtypeID;
	
	private System.Nullable<System.DateTime> _DOJ;
	
	private System.Nullable<System.DateTime> _Lastseen;
	
	private System.Nullable<bool> _IsAuthenticate;
	
	private System.Nullable<int> _Aid;
	
	private string _Usphoto;
	
	private string _UAdd;
	
	private EntitySet<Crime> _Crimes;
	
	private EntitySet<Feedback> _Feedbacks;
	
	private EntitySet<Message> _Messages;
	
	private EntitySet<MessageTO> _MessageTOs;
	
	private EntitySet<Criminal> _Criminals;
	
	private EntityRef<Area> _Area;
	
	private EntityRef<UserType> _UserType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUidChanging(int value);
    partial void OnUidChanged();
    partial void OnUnameChanging(string value);
    partial void OnUnameChanged();
    partial void OnULnameChanging(string value);
    partial void OnULnameChanged();
    partial void OnUphChanging(string value);
    partial void OnUphChanged();
    partial void OnUemailidChanging(string value);
    partial void OnUemailidChanged();
    partial void OnUpasswordChanging(string value);
    partial void OnUpasswordChanged();
    partial void OnugenderChanging(System.Nullable<bool> value);
    partial void OnugenderChanged();
    partial void OnUtypeIDChanging(System.Nullable<int> value);
    partial void OnUtypeIDChanged();
    partial void OnDOJChanging(System.Nullable<System.DateTime> value);
    partial void OnDOJChanged();
    partial void OnLastseenChanging(System.Nullable<System.DateTime> value);
    partial void OnLastseenChanged();
    partial void OnIsAuthenticateChanging(System.Nullable<bool> value);
    partial void OnIsAuthenticateChanged();
    partial void OnAidChanging(System.Nullable<int> value);
    partial void OnAidChanged();
    partial void OnUsphotoChanging(string value);
    partial void OnUsphotoChanged();
    partial void OnUAddChanging(string value);
    partial void OnUAddChanged();
    #endregion
	
	public User()
	{
		this._Crimes = new EntitySet<Crime>(new Action<Crime>(this.attach_Crimes), new Action<Crime>(this.detach_Crimes));
		this._Feedbacks = new EntitySet<Feedback>(new Action<Feedback>(this.attach_Feedbacks), new Action<Feedback>(this.detach_Feedbacks));
		this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
		this._MessageTOs = new EntitySet<MessageTO>(new Action<MessageTO>(this.attach_MessageTOs), new Action<MessageTO>(this.detach_MessageTOs));
		this._Criminals = new EntitySet<Criminal>(new Action<Criminal>(this.attach_Criminals), new Action<Criminal>(this.detach_Criminals));
		this._Area = default(EntityRef<Area>);
		this._UserType = default(EntityRef<UserType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Uid
	{
		get
		{
			return this._Uid;
		}
		set
		{
			if ((this._Uid != value))
			{
				this.OnUidChanging(value);
				this.SendPropertyChanging();
				this._Uid = value;
				this.SendPropertyChanged("Uid");
				this.OnUidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uname", DbType="VarChar(50)")]
	public string Uname
	{
		get
		{
			return this._Uname;
		}
		set
		{
			if ((this._Uname != value))
			{
				this.OnUnameChanging(value);
				this.SendPropertyChanging();
				this._Uname = value;
				this.SendPropertyChanged("Uname");
				this.OnUnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ULname", DbType="VarChar(50)")]
	public string ULname
	{
		get
		{
			return this._ULname;
		}
		set
		{
			if ((this._ULname != value))
			{
				this.OnULnameChanging(value);
				this.SendPropertyChanging();
				this._ULname = value;
				this.SendPropertyChanged("ULname");
				this.OnULnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uph", DbType="VarChar(50)")]
	public string Uph
	{
		get
		{
			return this._Uph;
		}
		set
		{
			if ((this._Uph != value))
			{
				this.OnUphChanging(value);
				this.SendPropertyChanging();
				this._Uph = value;
				this.SendPropertyChanged("Uph");
				this.OnUphChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uemailid", DbType="VarChar(50)")]
	public string Uemailid
	{
		get
		{
			return this._Uemailid;
		}
		set
		{
			if ((this._Uemailid != value))
			{
				this.OnUemailidChanging(value);
				this.SendPropertyChanging();
				this._Uemailid = value;
				this.SendPropertyChanged("Uemailid");
				this.OnUemailidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Upassword", DbType="VarChar(50)")]
	public string Upassword
	{
		get
		{
			return this._Upassword;
		}
		set
		{
			if ((this._Upassword != value))
			{
				this.OnUpasswordChanging(value);
				this.SendPropertyChanging();
				this._Upassword = value;
				this.SendPropertyChanged("Upassword");
				this.OnUpasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ugender", DbType="Bit")]
	public System.Nullable<bool> ugender
	{
		get
		{
			return this._ugender;
		}
		set
		{
			if ((this._ugender != value))
			{
				this.OnugenderChanging(value);
				this.SendPropertyChanging();
				this._ugender = value;
				this.SendPropertyChanged("ugender");
				this.OnugenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UtypeID", DbType="Int")]
	public System.Nullable<int> UtypeID
	{
		get
		{
			return this._UtypeID;
		}
		set
		{
			if ((this._UtypeID != value))
			{
				if (this._UserType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUtypeIDChanging(value);
				this.SendPropertyChanging();
				this._UtypeID = value;
				this.SendPropertyChanged("UtypeID");
				this.OnUtypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOJ", DbType="DateTime")]
	public System.Nullable<System.DateTime> DOJ
	{
		get
		{
			return this._DOJ;
		}
		set
		{
			if ((this._DOJ != value))
			{
				this.OnDOJChanging(value);
				this.SendPropertyChanging();
				this._DOJ = value;
				this.SendPropertyChanged("DOJ");
				this.OnDOJChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastseen", DbType="DateTime")]
	public System.Nullable<System.DateTime> Lastseen
	{
		get
		{
			return this._Lastseen;
		}
		set
		{
			if ((this._Lastseen != value))
			{
				this.OnLastseenChanging(value);
				this.SendPropertyChanging();
				this._Lastseen = value;
				this.SendPropertyChanged("Lastseen");
				this.OnLastseenChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAuthenticate", DbType="Bit")]
	public System.Nullable<bool> IsAuthenticate
	{
		get
		{
			return this._IsAuthenticate;
		}
		set
		{
			if ((this._IsAuthenticate != value))
			{
				this.OnIsAuthenticateChanging(value);
				this.SendPropertyChanging();
				this._IsAuthenticate = value;
				this.SendPropertyChanged("IsAuthenticate");
				this.OnIsAuthenticateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aid", DbType="Int")]
	public System.Nullable<int> Aid
	{
		get
		{
			return this._Aid;
		}
		set
		{
			if ((this._Aid != value))
			{
				if (this._Area.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAidChanging(value);
				this.SendPropertyChanging();
				this._Aid = value;
				this.SendPropertyChanged("Aid");
				this.OnAidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Usphoto", DbType="VarChar(50)")]
	public string Usphoto
	{
		get
		{
			return this._Usphoto;
		}
		set
		{
			if ((this._Usphoto != value))
			{
				this.OnUsphotoChanging(value);
				this.SendPropertyChanging();
				this._Usphoto = value;
				this.SendPropertyChanged("Usphoto");
				this.OnUsphotoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UAdd", DbType="VarChar(MAX)")]
	public string UAdd
	{
		get
		{
			return this._UAdd;
		}
		set
		{
			if ((this._UAdd != value))
			{
				this.OnUAddChanging(value);
				this.SendPropertyChanging();
				this._UAdd = value;
				this.SendPropertyChanged("UAdd");
				this.OnUAddChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Crime", Storage="_Crimes", ThisKey="Uid", OtherKey="Uid")]
	public EntitySet<Crime> Crimes
	{
		get
		{
			return this._Crimes;
		}
		set
		{
			this._Crimes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Feedback", Storage="_Feedbacks", ThisKey="Uid", OtherKey="Uid")]
	public EntitySet<Feedback> Feedbacks
	{
		get
		{
			return this._Feedbacks;
		}
		set
		{
			this._Feedbacks.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Message", Storage="_Messages", ThisKey="Uid", OtherKey="Uid")]
	public EntitySet<Message> Messages
	{
		get
		{
			return this._Messages;
		}
		set
		{
			this._Messages.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MessageTO", Storage="_MessageTOs", ThisKey="Uid", OtherKey="Uid")]
	public EntitySet<MessageTO> MessageTOs
	{
		get
		{
			return this._MessageTOs;
		}
		set
		{
			this._MessageTOs.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Criminal", Storage="_Criminals", ThisKey="Uid", OtherKey="Uid")]
	public EntitySet<Criminal> Criminals
	{
		get
		{
			return this._Criminals;
		}
		set
		{
			this._Criminals.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Area_User", Storage="_Area", ThisKey="Aid", OtherKey="Aid", IsForeignKey=true)]
	public Area Area
	{
		get
		{
			return this._Area.Entity;
		}
		set
		{
			Area previousValue = this._Area.Entity;
			if (((previousValue != value) 
						|| (this._Area.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Area.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._Area.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._Aid = value.Aid;
				}
				else
				{
					this._Aid = default(Nullable<int>);
				}
				this.SendPropertyChanged("Area");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_UserType", ThisKey="UtypeID", OtherKey="UtypeID", IsForeignKey=true)]
	public UserType UserType
	{
		get
		{
			return this._UserType.Entity;
		}
		set
		{
			UserType previousValue = this._UserType.Entity;
			if (((previousValue != value) 
						|| (this._UserType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserType.Entity = null;
					previousValue.Users.Remove(this);
				}
				this._UserType.Entity = value;
				if ((value != null))
				{
					value.Users.Add(this);
					this._UtypeID = value.UtypeID;
				}
				else
				{
					this._UtypeID = default(Nullable<int>);
				}
				this.SendPropertyChanged("UserType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Crimes(Crime entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Crimes(Crime entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Feedbacks(Feedback entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Feedbacks(Feedback entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Messages(Message entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Messages(Message entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_MessageTOs(MessageTO entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_MessageTOs(MessageTO entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Criminals(Criminal entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Criminals(Criminal entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Criminal")]
public partial class Criminal : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Criminalid;
	
	private System.Nullable<int> _CrimeId;
	
	private System.Nullable<int> _Uid;
	
	private System.Nullable<int> _CrimeTypeID;
	
	private System.Nullable<bool> _IsDisplay;
	
	private EntityRef<Crime> _Crime;
	
	private EntityRef<User> _User;
	
	private EntityRef<CrimeType> _CrimeType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCriminalidChanging(int value);
    partial void OnCriminalidChanged();
    partial void OnCrimeIdChanging(System.Nullable<int> value);
    partial void OnCrimeIdChanged();
    partial void OnUidChanging(System.Nullable<int> value);
    partial void OnUidChanged();
    partial void OnCrimeTypeIDChanging(System.Nullable<int> value);
    partial void OnCrimeTypeIDChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    #endregion
	
	public Criminal()
	{
		this._Crime = default(EntityRef<Crime>);
		this._User = default(EntityRef<User>);
		this._CrimeType = default(EntityRef<CrimeType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Criminalid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Criminalid
	{
		get
		{
			return this._Criminalid;
		}
		set
		{
			if ((this._Criminalid != value))
			{
				this.OnCriminalidChanging(value);
				this.SendPropertyChanging();
				this._Criminalid = value;
				this.SendPropertyChanged("Criminalid");
				this.OnCriminalidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrimeId", DbType="Int")]
	public System.Nullable<int> CrimeId
	{
		get
		{
			return this._CrimeId;
		}
		set
		{
			if ((this._CrimeId != value))
			{
				if (this._Crime.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCrimeIdChanging(value);
				this.SendPropertyChanging();
				this._CrimeId = value;
				this.SendPropertyChanged("CrimeId");
				this.OnCrimeIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uid", DbType="Int")]
	public System.Nullable<int> Uid
	{
		get
		{
			return this._Uid;
		}
		set
		{
			if ((this._Uid != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUidChanging(value);
				this.SendPropertyChanging();
				this._Uid = value;
				this.SendPropertyChanged("Uid");
				this.OnUidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrimeTypeID", DbType="Int")]
	public System.Nullable<int> CrimeTypeID
	{
		get
		{
			return this._CrimeTypeID;
		}
		set
		{
			if ((this._CrimeTypeID != value))
			{
				if (this._CrimeType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCrimeTypeIDChanging(value);
				this.SendPropertyChanging();
				this._CrimeTypeID = value;
				this.SendPropertyChanged("CrimeTypeID");
				this.OnCrimeTypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Crime_Criminal", Storage="_Crime", ThisKey="CrimeId", OtherKey="CrimeId", IsForeignKey=true)]
	public Crime Crime
	{
		get
		{
			return this._Crime.Entity;
		}
		set
		{
			Crime previousValue = this._Crime.Entity;
			if (((previousValue != value) 
						|| (this._Crime.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Crime.Entity = null;
					previousValue.Criminals.Remove(this);
				}
				this._Crime.Entity = value;
				if ((value != null))
				{
					value.Criminals.Add(this);
					this._CrimeId = value.CrimeId;
				}
				else
				{
					this._CrimeId = default(Nullable<int>);
				}
				this.SendPropertyChanged("Crime");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Criminal", Storage="_User", ThisKey="Uid", OtherKey="Uid", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Criminals.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Criminals.Add(this);
					this._Uid = value.Uid;
				}
				else
				{
					this._Uid = default(Nullable<int>);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CrimeType_Criminal", Storage="_CrimeType", ThisKey="CrimeTypeID", OtherKey="CrimeTypeId", IsForeignKey=true)]
	public CrimeType CrimeType
	{
		get
		{
			return this._CrimeType.Entity;
		}
		set
		{
			CrimeType previousValue = this._CrimeType.Entity;
			if (((previousValue != value) 
						|| (this._CrimeType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CrimeType.Entity = null;
					previousValue.Criminals.Remove(this);
				}
				this._CrimeType.Entity = value;
				if ((value != null))
				{
					value.Criminals.Add(this);
					this._CrimeTypeID = value.CrimeTypeId;
				}
				else
				{
					this._CrimeTypeID = default(Nullable<int>);
				}
				this.SendPropertyChanged("CrimeType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Nid;
	
	private string _NTitle;
	
	private System.Nullable<bool> _IsDisplay;
	
	private string _NDescp;
	
	private string _NImg;
	
	private System.Nullable<System.DateTime> _NDate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNidChanging(int value);
    partial void OnNidChanged();
    partial void OnNTitleChanging(string value);
    partial void OnNTitleChanged();
    partial void OnIsDisplayChanging(System.Nullable<bool> value);
    partial void OnIsDisplayChanged();
    partial void OnNDescpChanging(string value);
    partial void OnNDescpChanged();
    partial void OnNImgChanging(string value);
    partial void OnNImgChanged();
    partial void OnNDateChanging(System.Nullable<System.DateTime> value);
    partial void OnNDateChanged();
    #endregion
	
	public New()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Nid
	{
		get
		{
			return this._Nid;
		}
		set
		{
			if ((this._Nid != value))
			{
				this.OnNidChanging(value);
				this.SendPropertyChanging();
				this._Nid = value;
				this.SendPropertyChanged("Nid");
				this.OnNidChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NTitle", DbType="VarChar(50)")]
	public string NTitle
	{
		get
		{
			return this._NTitle;
		}
		set
		{
			if ((this._NTitle != value))
			{
				this.OnNTitleChanging(value);
				this.SendPropertyChanging();
				this._NTitle = value;
				this.SendPropertyChanged("NTitle");
				this.OnNTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDisplay", DbType="Bit")]
	public System.Nullable<bool> IsDisplay
	{
		get
		{
			return this._IsDisplay;
		}
		set
		{
			if ((this._IsDisplay != value))
			{
				this.OnIsDisplayChanging(value);
				this.SendPropertyChanging();
				this._IsDisplay = value;
				this.SendPropertyChanged("IsDisplay");
				this.OnIsDisplayChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NDescp", DbType="VarChar(MAX)")]
	public string NDescp
	{
		get
		{
			return this._NDescp;
		}
		set
		{
			if ((this._NDescp != value))
			{
				this.OnNDescpChanging(value);
				this.SendPropertyChanging();
				this._NDescp = value;
				this.SendPropertyChanged("NDescp");
				this.OnNDescpChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NImg", DbType="VarChar(50)")]
	public string NImg
	{
		get
		{
			return this._NImg;
		}
		set
		{
			if ((this._NImg != value))
			{
				this.OnNImgChanging(value);
				this.SendPropertyChanging();
				this._NImg = value;
				this.SendPropertyChanged("NImg");
				this.OnNImgChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NDate", DbType="Date")]
	public System.Nullable<System.DateTime> NDate
	{
		get
		{
			return this._NDate;
		}
		set
		{
			if ((this._NDate != value))
			{
				this.OnNDateChanging(value);
				this.SendPropertyChanging();
				this._NDate = value;
				this.SendPropertyChanged("NDate");
				this.OnNDateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
